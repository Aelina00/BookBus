import storageService from './storage';
import { authAPI, routesAPI, busesAPI, bookingsAPI } from './api';

class SyncService {
  constructor() {
    this.isOnline = navigator.onLine;
    this.syncInterval = null;
    this.lastSync = null;
  }

  // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  startAutoSync() {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    this.syncInterval = setInterval(() => {
      if (this.isOnline) {
        this.syncWithServer();
      }
    }, 30000);

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    window.addEventListener('online', () => {
      this.isOnline = true;
      this.syncWithServer();
    });

    window.addEventListener('offline', () => {
      this.isOnline = false;
    });
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  stopAutoSync() {
    if (this.syncInterval) {
      clearInterval(this.syncInterval);
      this.syncInterval = null;
    }
  }

  // –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  async syncWithServer() {
    try {
      if (!this.isOnline) return;

      console.log('üîÑ Starting sync with server...');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      const serverData = await this.getServerData();
      
      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const localData = await storageService.getAllData();

      // –ú–µ—Ä–∂–∏–º –¥–∞–Ω–Ω—ã–µ
      const mergedData = this.mergeData(localData, serverData);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
      await this.saveLocalData(mergedData);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      await this.sendDataToServer(mergedData);

      this.lastSync = new Date();
      console.log('‚úÖ Sync completed successfully');

      return mergedData;
    } catch (error) {
      console.error('‚ùå Sync failed:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
  async getServerData() {
    try {
      const [routes, buses, bookings] = await Promise.all([
        routesAPI.getAll(),
        this.getAllBuses(),
        this.getAllBookings()
      ]);

      return {
        routes: routes.data || [],
        buses: buses || {},
        bookingHistory: bookings || [],
        bookedSeats: await this.calculateBookedSeats(bookings || []),
        reviews: await this.getReviews()
      };
    } catch (error) {
      console.log('Server data fetch failed, using local data');
      return {};
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤
  async getAllBuses() {
    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å API –≤—ã–∑–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      return await storageService.getItem('buses', {});
    } catch (error) {
      return {};
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  async getAllBookings() {
    try {
      const currentUser = await storageService.getItem('currentUser');
      if (!currentUser) return [];

      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å API –≤—ã–∑–æ–≤
      return await storageService.getItem('bookingHistory', []);
    } catch (error) {
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
  async getReviews() {
    try {
      return await storageService.getItem('reviews', []);
    } catch (error) {
      return [];
    }
  }

  // –†–∞—Å—á–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç
  async calculateBookedSeats(bookings) {
    const bookedSeats = {};
    
    bookings.forEach(booking => {
      const key = `${booking.busId}-${booking.date}`;
      if (!bookedSeats[key]) {
        bookedSeats[key] = [];
      }
      bookedSeats[key] = [...bookedSeats[key], ...booking.seats];
    });

    return bookedSeats;
  }

  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  mergeData(localData, serverData) {
    const merged = {
      routes: this.mergeArrays(localData.routes || [], serverData.routes || [], 'id'),
      buses: { ...localData.buses, ...serverData.buses },
      bookingHistory: this.mergeArrays(localData.bookingHistory || [], serverData.bookingHistory || [], 'id'),
      bookedSeats: { ...localData.bookedSeats, ...serverData.bookedSeats },
      reviews: this.mergeArrays(localData.reviews || [], serverData.reviews || [], 'id')
    };

    console.log('üîÄ Data merged:', {
      routes: merged.routes.length,
      bookings: merged.bookingHistory.length,
      reviews: merged.reviews.length
    });

    return merged;
  }

  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –ø–æ–ª—é
  mergeArrays(local, server, idField) {
    const merged = [...local];
    const localIds = new Set(local.map(item => item[idField]));

    server.forEach(serverItem => {
      if (!localIds.has(serverItem[idField])) {
        merged.push(serverItem);
      }
    });

    return merged;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω–æ
  async saveLocalData(data) {
    await Promise.all([
      storageService.setItem('routes', data.routes),
      storageService.setItem('buses', data.buses),
      storageService.setItem('bookingHistory', data.bookingHistory),
      storageService.setItem('bookedSeats', data.bookedSeats),
      storageService.setItem('reviews', data.reviews)
    ]);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  async sendDataToServer(data) {
    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å API –≤—ã–∑–æ–≤—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      console.log('üì§ Sending data to server...');
      
      // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç backend):
      /*
      await Promise.all([
        this.sendRoutes(data.routes),
        this.sendBuses(data.buses),
        this.sendBookings(data.bookingHistory),
        this.sendReviews(data.reviews)
      ]);
      */
      
      console.log('‚úÖ Data sent to server');
    } catch (error) {
      console.log('‚ö†Ô∏è Failed to send data to server:', error);
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  async forcSync() {
    return await this.syncWithServer();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  getLastSyncTime() {
    return this.lastSync;
  }
}

export default new SyncService();