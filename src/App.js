// –í–°–ï –ò–ú–ü–û–†–¢–´ –í –ù–ê–ß–ê–õ–ï –§–ê–ô–õ–ê (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º ESLint –æ—à–∏–±–∫–∏)
import React, { useState, useEffect } from 'react';
import {
  CreditCard, Calendar, MapPin, Users, Clock, ArrowLeft,
  Bell, Home, Ticket, User, Mail, Phone, Lock, Edit,
  Plus, Check, AlertCircle, ChevronDown, ChevronRight,
  Globe, Settings, LogOut, Help, Star, X, Eye, EyeOff,
  Info, Menu, CheckCircle, Trash2, Map, Filter, Search
} from 'lucide-react';
import './App.css';
import logo from './logo/logo.png';

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
const saveToLocalStorage = (key, data) => {
  try {
    localStorage.setItem(key, JSON.stringify(data));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  }
};

const loadFromLocalStorage = (key, defaultValue = null) => {
  try {
    const saved = localStorage.getItem(key);
    return saved ? JSON.parse(saved) : defaultValue;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    return defaultValue;
  }
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
const getCurrentDate = () => {
  const today = new Date();
  return `${String(today.getDate()).padStart(2, '0')}-${String(today.getMonth() + 1).padStart(2, '0')}-${today.getFullYear()}`;
};

const isDatePassed = (dateString) => {
  const [day, month, year] = dateString.split('-').map(Number);
  const date = new Date(year, month - 1, day);
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  return date < today;
};

// –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
const getInitialUsers = () => [
  {
    id: 1,
    phone: "+996555123456",
    password: "admin123",
    firstName: "–ê–¥–º–∏–Ω",
    lastName: "Karakol Bus",
    role: "admin",
    isVerified: true
  }
];

// –ü–µ—Ä–µ–≤–æ–¥—ã
const translations = {
  ru: {
    appName: "Karakol Bus",
    oneWay: "–í –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É",
    roundTrip: "–¢—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ",
    from: "–û—Ç–∫—É–¥–∞",
    to: "–ö—É–¥–∞",
    date: "–î–∞—Ç–∞",
    passengers: "–ü–∞—Å—Å–∞–∂–∏—Ä—ã",
    search: "–ü–æ–∏—Å–∫",
    login: "–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
    phone: "–¢–µ–ª–µ—Ñ–æ–Ω",
    password: "–ü–∞—Ä–æ–ª—å",
    loginButton: "–í–æ–π—Ç–∏",
    firstName: "–ò–º—è",
    lastName: "–§–∞–º–∏–ª–∏—è",
    home: "–ì–ª–∞–≤–Ω–∞—è",
    trips: "–ü–æ–µ–∑–¥–∫–∏",
    profile: "–ü—Ä–æ—Ñ–∏–ª—å",
    logout: "–í—ã–π—Ç–∏",
    fillAllFields: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è",
    invalidPhone: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
  }
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
const PhoneAuth = ({ onAuthSuccess }) => {
  const [phone, setPhone] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const t = translations.ru;

  const formatPhoneNumber = (value) => {
    const cleaned = value.replace(/\D/g, '');
    if (cleaned.startsWith('996')) {
      return '+' + cleaned;
    } else if (cleaned.startsWith('0')) {
      return '+996' + cleaned.substring(1);
    } else if (cleaned.length <= 9) {
      return '+996' + cleaned;
    }
    return '+' + cleaned;
  };

  const isValidPhone = (phone) => {
    const phoneRegex = /^\+996[0-9]{9}$/;
    return phoneRegex.test(phone);
  };

  const handleLogin = async (e) => {
    e.preventDefault();
    
    if (!isValidPhone(phone)) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
      return;
    }

    setIsLoading(true);
    setError('');

    // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    setTimeout(() => {
      if (phone === '+996555123456') {
        const user = {
          id: 1,
          phone: phone,
          firstName: '–ê–¥–º–∏–Ω',
          lastName: '–°–∏—Å—Ç–µ–º—ã',
          role: 'admin'
        };
        
        saveToLocalStorage('currentUser', user);
        onAuthSuccess(user);
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = {
          id: Date.now(),
          phone: phone,
          firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          lastName: '',
          role: 'user'
        };
        
        saveToLocalStorage('currentUser', user);
        onAuthSuccess(user);
      }
      setIsLoading(false);
    }, 1000);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center px-4">
      <div className="w-full max-w-md">
        <div className="bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden">
          <div className="p-6 bg-gradient-to-r from-blue-600 to-blue-700">
            <h1 className="text-2xl font-bold text-white text-center">{t.login}</h1>
          </div>

          <div className="p-6">
            {error && (
              <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg flex items-center">
                <AlertCircle size={20} className="text-red-600 mr-3" />
                <span className="text-red-700 text-sm">{error}</span>
              </div>
            )}

            <form onSubmit={handleLogin} className="space-y-5">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">{t.phone}</label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <Phone size={20} className="text-gray-400" />
                  </div>
                  <input
                    type="tel"
                    className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                    placeholder="+996 XXX XXX XXX"
                    value={phone}
                    onChange={(e) => setPhone(formatPhoneNumber(e.target.value))}
                    maxLength={13}
                  />
                </div>
              </div>

              <button
                type="submit"
                disabled={isLoading || !isValidPhone(phone)}
                className="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg py-3 font-semibold hover:from-blue-700 hover:to-blue-800 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
              >
                {isLoading ? (
                  <div className="flex items-center justify-center">
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                    –í—Ö–æ–¥...
                  </div>
                ) : (
                  t.loginButton
                )}
              </button>
            </form>

            <div className="mt-6 p-4 bg-gray-50 rounded-lg">
              <p className="text-sm text-gray-600 text-center">
                <strong>–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong><br />
                –ê–¥–º–∏–Ω: +996555123456<br />
                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const App = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);
  const [currentScreen, setCurrentScreen] = useState('search');
  const [searchData, setSearchData] = useState({
    from: '',
    to: '',
    date: getCurrentDate(),
    passengers: 1
  });

  const t = translations.ru;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    const savedUser = loadFromLocalStorage('currentUser');
    if (savedUser) {
      setCurrentUser(savedUser);
      setIsLoggedIn(true);
    }
  }, []);

  const handleAuthSuccess = (user) => {
    setCurrentUser(user);
    setIsLoggedIn(true);
  };

  const handleLogout = () => {
    localStorage.removeItem('currentUser');
    setCurrentUser(null);
    setIsLoggedIn(false);
    setCurrentScreen('search');
  };

  // –ï—Å–ª–∏ –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
  if (!isLoggedIn) {
    return <PhoneAuth onAuthSuccess={handleAuthSuccess} />;
  }

  // –†–µ–Ω–¥–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  return (
    <div className="flex justify-center min-h-screen bg-gray-100">
      <div className="w-full max-w-md mx-auto bg-white shadow-2xl relative">
        
        {/* –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω –ø–æ–∏—Å–∫–∞ */}
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
          {/* Header */}
          <header className="bg-white shadow-sm border-b border-gray-200">
            <div className="px-4 py-4">
              <div className="flex items-center justify-between">
                <img src={logo} alt="Karakol Bus" className="h-10 w-auto" />
                <div className="flex items-center space-x-4">
                  <Bell size={20} className="text-gray-600" />
                  <button
                    onClick={() => setCurrentScreen('profile')}
                    className="p-2 rounded-full bg-blue-100"
                  >
                    <User size={20} className="text-blue-600" />
                  </button>
                </div>
              </div>
            </div>
          </header>

          <div className="px-4 py-6">
            {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ */}
            <div className="mb-6">
              <h1 className="text-2xl font-bold text-gray-800 mb-2">
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {currentUser?.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üëã
              </h1>
              <p className="text-gray-600">–ù–∞–π–¥–∏—Ç–µ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –±–∏–ª–µ—Ç –Ω–∞ –∞–≤—Ç–æ–±—É—Å</p>
            </div>

            {/* –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ */}
            <div className="bg-white rounded-2xl shadow-lg border border-gray-200 overflow-hidden mb-6">
              <div className="p-6 space-y-4">
                {/* –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                <div className="space-y-3">
                  <div className="relative">
                    <select
                      className="w-full border border-gray-300 rounded-lg px-4 py-3 appearance-none bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      value={searchData.from}
                      onChange={(e) => setSearchData({...searchData, from: e.target.value})}
                    >
                      <option value="">{t.from}</option>
                      <option value="–ë–∏—à–∫–µ–∫">–ë–∏—à–∫–µ–∫</option>
                      <option value="–ö–∞—Ä–∞–∫–æ–ª">–ö–∞—Ä–∞–∫–æ–ª</option>
                      <option value="–û—à">–û—à</option>
                    </select>
                  </div>

                  <div className="relative">
                    <select
                      className="w-full border border-gray-300 rounded-lg px-4 py-3 appearance-none bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      value={searchData.to}
                      onChange={(e) => setSearchData({...searchData, to: e.target.value})}
                    >
                      <option value="">{t.to}</option>
                      <option value="–ö–∞—Ä–∞–∫–æ–ª">–ö–∞—Ä–∞–∫–æ–ª</option>
                      <option value="–ë–∏—à–∫–µ–∫">–ë–∏—à–∫–µ–∫</option>
                      <option value="–û—à">–û—à</option>
                    </select>
                  </div>
                </div>

                {/* –î–∞—Ç–∞ */}
                <div>
                  <input
                    type="date"
                    className="w-full border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    value={searchData.date.split('-').reverse().join('-')}
                    onChange={(e) => {
                      const newDate = e.target.value.split('-').reverse().join('-');
                      setSearchData({...searchData, date: newDate});
                    }}
                    min={getCurrentDate().split('-').reverse().join('-')}
                  />
                </div>

                {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ */}
                <div className="relative">
                  <select
                    className="w-full border border-gray-300 rounded-lg px-4 py-3 appearance-none bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    value={searchData.passengers}
                    onChange={(e) => setSearchData({...searchData, passengers: parseInt(e.target.value)})}
                  >
                    {[1,2,3,4,5,6,7,8,9,10].map(num => (
                      <option key={num} value={num}>
                        {num} {num === 1 ? '–ø–∞—Å—Å–∞–∂–∏—Ä' : num < 5 ? '–ø–∞—Å—Å–∞–∂–∏—Ä–∞' : '–ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤'}
                      </option>
                    ))}
                  </select>
                </div>

                <button
                  onClick={() => {
                    if (searchData.from && searchData.to && searchData.date) {
                      alert('–ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤...');
                    } else {
                      alert(t.fillAllFields);
                    }
                  }}
                  disabled={!searchData.from || !searchData.to || !searchData.date}
                  className="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg py-4 font-semibold hover:from-blue-700 hover:to-blue-800 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                >
                  {t.search}
                </button>
              </div>
            </div>

            {/* –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã */}
            <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
              <h3 className="text-lg font-semibold mb-4">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã</h3>
              <div className="space-y-3">
                <button
                  onClick={() => setSearchData({...searchData, from: '–ë–∏—à–∫–µ–∫', to: '–ö–∞—Ä–∞–∫–æ–ª'})}
                  className="w-full flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
                >
                  <span>–ë–∏—à–∫–µ–∫ ‚Üí –ö–∞—Ä–∞–∫–æ–ª</span>
                  <span className="text-blue-600 font-medium">600 —Å–æ–º</span>
                </button>
                <button
                  onClick={() => setSearchData({...searchData, from: '–ö–∞—Ä–∞–∫–æ–ª', to: '–ë–∏—à–∫–µ–∫'})}
                  className="w-full flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
                >
                  <span>–ö–∞—Ä–∞–∫–æ–ª ‚Üí –ë–∏—à–∫–µ–∫</span>
                  <span className="text-blue-600 font-medium">600 —Å–æ–º</span>
                </button>
              </div>
            </div>
          </div>

          {/* –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
          <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 shadow-lg">
            <div className="max-w-md mx-auto flex justify-around py-3">
              <button className="flex flex-col items-center text-xs">
                <Home size={24} className="text-blue-600 mb-1" />
                <span className="text-blue-600 font-medium">{t.home}</span>
              </button>
              <button className="flex flex-col items-center text-xs">
                <Ticket size={24} className="text-gray-500 mb-1" />
                <span className="text-gray-500">{t.trips}</span>
              </button>
              <button 
                className="flex flex-col items-center text-xs"
                onClick={handleLogout}
              >
                <LogOut size={24} className="text-gray-500 mb-1" />
                <span className="text-gray-500">{t.logout}</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default App;